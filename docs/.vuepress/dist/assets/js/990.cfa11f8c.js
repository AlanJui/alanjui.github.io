(window.webpackJsonp=window.webpackJsonp||[]).push([[990],{1568:function(n,e,t){"use strict";t.r(e);var i=t(10),o=Object(i.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"nvim-tmux-打造-django-開發環境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nvim-tmux-打造-django-開發環境"}},[n._v("#")]),n._v(" Nvim + Tmux 打造 Django 開發環境")]),n._v(" "),t("h2",{attrs:{id:"軟體開發者打造環境的需求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#軟體開發者打造環境的需求"}},[n._v("#")]),n._v(" 軟體開發者打造環境的需求")]),n._v(" "),t("p",[n._v("從軟體開發者的工作流程，觀察作業應用的使用者需求；兼談 tmux 與 vim 工具能提供的功能特性。")]),n._v(" "),t("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/sSOfr2MtRU8",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}}),n._v(" "),t("h2",{attrs:{id:"以-vs-code-為師，使用-vim-tmux-打造開發環境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#以-vs-code-為師，使用-vim-tmux-打造開發環境"}},[n._v("#")]),n._v(" 以 vs code 為師，使用 vim + tmux 打造開發環境")]),n._v(" "),t("p",[n._v("對於用過 vs code 的使用者，想要透過 vim + tmux 打造個人化開發環境時，該怎麼做、應滿足那些要求？！")]),n._v(" "),t("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/gnupOrSEikQ",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}}),n._v(" "),t("h2",{attrs:{id:"跟著高手練功"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跟著高手練功"}},[n._v("#")]),n._v(" 跟著高手練功")]),n._v(" "),t("p",[n._v("參考高手已完成的實作案例，快速學習實務方面，在「設定」上的 how-to 。")]),n._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://jdhao.github.io/2018/12/24/centos_nvim_install_use_guide_en/",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[n._v("a complete guide for installing and setting up neovim for python development")]),t("OutboundLink")],1)]),n._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[n._v("【附註】：")]),n._v(" "),t("p",[n._v("以上文章，個人已完成實習，並將 nvim 設定檔（ "),t("strong",[n._v("init.vim")]),n._v(" ）的內容抄錄於下方，供有興趣的朋友參考之用。")])])]),n._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://jdhao.github.io/2018/12/24/centos_nvim_install_use_guide_en/",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[n._v("setup neovim for python")]),t("OutboundLink")],1)])]),n._v(" "),t("li",[t("p",[t("a",{attrs:{href:"http://liaoph.com/modern-vim/",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[n._v("使用 neovim 打造一個現代化的編輯單")]),t("OutboundLink")],1)])]),n._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://blog.inkdrop.info/vscode-like-environment-with-vim-tmux-4c2bfe17d31e",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[n._v("vscode-like envirnoment with vim + tmux")]),t("OutboundLink")],1)])])]),n._v(" "),t("h2",{attrs:{id:"基礎打底"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基礎打底"}},[n._v("#")]),n._v(" 基礎打底")]),n._v(" "),t("p",[n._v("因為對 vim 或 tmux ，「有點熟但不是很熟 」的朋友，有些「專有名詞」、「操作概念」還無法全掌握者，可參考以下資料，練好基本功，為實力紮基礎。")]),n._v(" "),t("h3",{attrs:{id:"🖲-python-開發者使用需求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🖲-python-開發者使用需求"}},[n._v("#")]),n._v(" 🖲 Python 開發者使用需求")]),n._v(" "),t("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/vlb3qUiS2ZY",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}}),n._v(" "),t("h3",{attrs:{id:"🖲-何謂-syntax-highlighting"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🖲-何謂-syntax-highlighting"}},[n._v("#")]),n._v(" 🖲 何謂 Syntax Highlighting")]),n._v(" "),t("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/P5US8U8-KmA",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}}),n._v(" "),t("h3",{attrs:{id:"🖲-copy-and-paste-for-tmux-vim-on-linux"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🖲-copy-and-paste-for-tmux-vim-on-linux"}},[n._v("#")]),n._v(" 🖲 "),t("a",{attrs:{href:"http://squidarth.com/programming/2018/12/14/tmux-linux.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("copy and paste for tmux & vim on linux"),t("OutboundLink")],1)]),n._v(" "),t("h3",{attrs:{id:"🖲-使用-linux-的-appimage-檔案在-ubuntu-18-04-安裝-nvim"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🖲-使用-linux-的-appimage-檔案在-ubuntu-18-04-安裝-nvim"}},[n._v("#")]),n._v(" 🖲 "),t("a",{attrs:{href:"https://github.com/neovim/neovim/releases/tag/v0.4.3",target:"_blank",rel:"noopener noreferrer"}},[n._v("使用 linux 的 appimage 檔案在 ubuntu 18.04 安裝 nvim"),t("OutboundLink")],1)]),n._v(" "),t("h2",{attrs:{id:"個人實作成品參考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#個人實作成品參考"}},[n._v("#")]),n._v(" 個人實作成品參考")]),n._v(" "),t("p",[n._v("以下之「設定檔」，於 ubuntu 18.04 作業系統完成實作。")]),n._v(" "),t("h3",{attrs:{id:"nvim-設定檔（～-config-nvim-init-vim"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nvim-設定檔（～-config-nvim-init-vim"}},[n._v("#")]),n._v(" nvim 設定檔（～/.config/nvim/init.vim)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('"--------------------------------------------------------------\n" 擴充套件（plugins）\n"--------------------------------------------------------------\n\ncall plug#begin(\'~/.local/share/nvim/plugged\')\n\n" 停用擴充套件\n" Plug \'davidhalter/jedi-vim\', { \'on\': []}\n\n" 程式語言　auto-completion\nPlug \'Shougo/deoplete.nvim\', { \'do\': \':UpdateRemotePlugins\' }\nPlug \'davidhalter/jedi-vim\'\n\n" 狀態指示列\nPlug \'vim-airline/vim-airline\'\nPlug \'vim-airline/vim-airline-themes\'\n\n" 自動配對\nPlug \'jiangmiao/auto-pairs\'\n\n" 註釋\nPlug \'scrooloose/nerdcommenter\'\n\n" 自動調整排版格式\n" pip install yapf\nPlug \'sbdchd/neoformat\'\n\n" 自動顯示定義處(Code Jump)\nPlug \'davidhalter/jedi-vim\'\n\n" 檔案顯示管理\nPlug \'scrooloose/nerdtree\'\n\n" 程式碼檢核\n" pipenv install pylint\nPlug \'neomake/neomake\'\n\n" 多游標編輯\nPlug \'terryma/vim-multiple-cursors\'\n\n" 高亮度標示被複製的文字\nPlug \'machakann/vim-highlightedyank\'\n\n" 折疊／開展程式碼\nPlug \'tmhedberg/SimpylFold\'\n\n" 佈景（Theme）\nPlug \'morhetz/gruvbox\'\nPlug \'joshdick/onedark.vim\'\nPlug \'itchyny/lightline.vim\'\nPlug \'sheerun/vim-polyglot\'\n\ncall plug#end()\n\n\n"--------------------------------------------------------------\n" 系統設定\n"--------------------------------------------------------------\n\n" 設定 <Leader> 鍵\nlet g:mapleader = ","\nlet mapleader = ","\nset timeout timeoutlen=1500\n\nset clipboard=unnamedplus\n\n" 可用滑鼠操作\nset mouse=a\n\n" 顯示「行標」\nset cursorline\n\n" 離開插入模式，回返一般模式\nimap jj <Esc>\n\n" 設定〔行號〕顯示模式\nset number                  " 顯示行號\nset relativenumber          " 在遊標所在處顯示相對行號\n\n" 變更行號顯示模式\nnmap <leader>nu :set number<CR>             " :set nu\nnmap <leader>n! :set nonumber<CR>           " :set nu!\nnmap <leader>NU :set relativenumber<CR>     " :set rnu\nnmap <leader>N! :set norelativenumber<CR>   " :set nornu\n\n\n"--------------------------------------------------------------\n" 檔案作業\n\n" 停用 backup 與 swap 功能\nset nobackup\nset nowritebackup\nset noswapfile\n\n" Automatically re-read file if a change was detected outside of vim\nset autoread\n\n\n" 編輯設定檔\nnmap <Leader>i :tabnew ~/.config/nvim/init.vim<CR>\n\n" 依據設定檔重啟設定\nnmap <Leader>I :source ~/.config/nvim/init.vim<CR>\n\n\n" 儲存檔案\nnmap <Leader>w :w<CR>\nimap <Leader>w :w<CR>\nvmap <Leader>w :w<CR>\nnnoremap fs :w<CR>\n\n\n" Allows you to save files you opened without write permissions via sudo\ncmap w!! w !sudo tee %\n\n\n" 關閉目前正編輯的檔案\nmap fc :bd<CR>      " 已存檔\nmap fC :bd!<CR>     " 已編輯，不存檔，強迫關閉\n\n\n" 退出 Vim\nnoremap <Leader>e :quit<CR>  " Exit current window\nnoremap <Leader>E :qa!<CR>   " Exit all windows\nnnoremap <Leader>Q  :qa!<CR>\n\n\n"--------------------------------------------------------------\n" Tabs and spaces handling\nset smarttab\nset cindent\nset tabstop=2\nset shiftwidth=2\nset softtabstop=2\nset shiftround\nset expandtab               " always uses spaces instead of tab characters\n\n\n" 文字搜尋：Serach configuration\nset ignorecase              " 搜尋時怱略英文字母的大小寫\nset smartcase               " turn on smartcase\nset incsearch\nset hlsearch                " highlight search results\n\n\n\n"--------------------------------------------------------------\n" 系統設定\n"--------------------------------------------------------------\n\n" Enable deoplete plugin\nlet g:python3_host_prog = "/home/web_admin/.pyenv/shims/python"\n\n"\n" 程式語言　auto-completion\n"\nlet g:deoplete#enable_at_startup = 1\n\n" automatically close the method preview window\nautocmd InsertLeave, CompleteDone * if pumvisible() == 0 | pclose | endif\n\n" Navigate through the auto-completion list with Tab key\ninoremap <expr><tab> pumvisible() ? "\\<c-n>" : "\\<tab>"\n\n"\n" 狀態指示列\n"\nlet g:airline_theme=\'luna\'\n\n\n"\n" 自動調整排版格式\n"\n\n" Vim Command\n" :Neoformat! [python [yapf]]\n\n" Enable alignment\nlet g:neoformat_basic_format_align = 1\n\n" Enable tab to spaces conversion\nlet g:neoformat_basic_format_retab = 1\n\n" Enable trimming of trailing whitespace\nlet g:neoformat_basic_format_trim = 1\n\n" Run a formatter on save\naugroup fmt\n  autocmd!\n  autocmd BufWritePre * undojoin | Neoformat\naugroup END\n\n\n"\n" 自動顯示定義處(Code Jump)\n"\n\n" Move the cursor to the class or method you want to check, then press the various supported shortcut provided by jedi-vim:\n"\n" - <leader>d: go to definition\n" - K:         check documentation of class or method\n" - <leader>n: show the usage of a name in current file\n" - <leader>r: rename a name\n\n" disable autocompletion, cause we use deoplete for completion\nlet g:jedi#completions_enabled = 0\n\n" open the go-to function in split, not another buffer\nlet g:jedi#use_splits_not_buffers = \'right\'\n\n\n"\n" 檔案顯示管理\n"\n\n" Vim Command: NERDTree\n" OP Ref: https://jdhao.github.io/2018/09/10/nerdtree_usage/\n" - Open a file in the file explorer: <o>\n" - Switch betwen file window and nerdtree file navigation window:\n"     (a) <C-w><C-w>\n"     (b) <C-w><L>\n" - close file explorer window:\n"     (a) <q> on file explorer window\n"     (b) Vim Command: NERDTreeClose\n\n" Open the NerdTree window when start up Nvim, but put the cursor in the file-editing window\nautocmd VimEnter * NERDTree | wincmd p\n\n" Sublime Text like： Open side bar\nnnoremap <silent> <C-k><C-b> :NERDTreeToggle<CR>\n\n\n"\n" 程式碼檢核\n"\n" Vim Command:\n"  - Neomake: Manually start syntax checking\n"  - lwindow / lopen: Navigate them using the buil-in methods\n"  - lprev / lnext : Go back and forth\n"\n"  pylint --generate-rcfile > ~/.pylintrc\n"  Usage Ref: https://stackoverflow.com/questions/4341746/how-do-i-disable-a-pylint-warning/23542817#23542817\n\nlet g:neomake_python_enabled_makers = [\'pylint\']\n\n" Open the list automatically\nlet g:neomake_open_list = 2\n\n" enable automatical code check: normal mode (after 1s; no delay when writing)\ncall neomake#configure#automake(\'nrwi\', 500)\n\n\n"\n" 多游標編輯\n"\n" (1) move the cursor to a variable you want to rename\n" (2) press <C-n> to enter multiple cursor ediiting mode and let variable to be highlighted\n" (3) if a occurance want to skip, press <C-x>\n" (4) press <c> (meands to change) and enter insert mode. Input a new name.\n" (5) press <ESC> to exit multiple cursor editting mode\n\n\n"\n" 高亮度標示被複製的文字\n"\n\nhighlight HighlightedyankRegion cterm=reverse gui=reverse\n\n" set highlight duration time to 1000 ms, i.e., 1 second\nlet g:highlightedyank_highlight_duration = 1000\n\n\n"\n" 折疊／開展程式碼\n"\n\n" - zo： Open fold in current cursor postion\n" - zO： Open fold and sub-fold in current cursor postion recursively\n" - zc： Close the fold in current cursor position\n" - zC： Close the fold and sub-fold in current cursor position recursively\n\nlet g:SimpylFold_docstring_preview = 1\nlet g:SimpylFold_fold_docstring = 0\nlet g:SimpylFold_fold_import = 0\n\n\n"\n" 佈景（Theme）\n"\n\n" support true color\nset notermguicolors\n\n" airline theme\nset laststatus=2\nif !has(\'gui_running\')\n  set t_Co=256\nendif\nset noshowmode\nlet g:lightline = {\n      \\ \'colorscheme\': \'wombat\',\n      \\ }\n\nlet g:airline_theme=\'tomorrow\'\n\n" gruvbox theme\ncolorscheme gruvbox\nset background=dark\n"set background=light\n\n"" onedark theme\n"let g:onedark_hide_endofbuffer = 0\n"let g:onedark_termcolors = 256\n\n"" onedark#extend_highlight\n"if (has("autocmd"))\n"augroup colorextend\n"autocmd!\n"" Make `Function`s bold in GUI mode\n"autocmd ColorScheme * call onedark#extend_highlight("Function", { "gui": "bold" })\n"" Override the `Statement` foreground color in 256-color mode\n"autocmd ColorScheme * call onedark#extend_highlight("Statement", { "fg": { "cterm": 128 } })\n"" Override the `Identifier` background color in GUI mode\n"autocmd ColorScheme * call onedark#extend_highlight("Identifier", { "bg": { "gui": "#333333" } })\n"augroup END\n"endif\n\n"" onedark#set_highlight\n"" onedark.vim override: Don\'t set a background color when running in a terminal;\n"" just use the terminal\'s background color\n"" `gui` is the hex color code used in GUI mode/nvim true-color mode\n"" `cterm` is the color code used in 256-color mode\n"" `cterm16` is the color code used in 16-color mode\n"if (has("autocmd") && !has("gui_running"))\n"augroup colorset\n"autocmd!\n"let s:white = { "gui": "#ABB2BF", "cterm": "145", "cterm16" : "7" }\n"autocmd ColorScheme * call onedark#set_highlight("Normal", { "fg": s:white }) " `bg` will not be styled since there is no `bg` setting\n"augroup END\n"endif\n\n""" Global color overrides\n"let g:onedark_color_overrides = {\n      "\\ "black": {"gui": "#2F343F", "cterm": "235", "cterm16": "0" },\n      "\\ "purple": { "gui": "#C678DF", "cterm": "170", "cterm16": "5" }\n"\\}\n\n"syntax on\n"colorscheme onedark\n\n\n"\n" Builtin terminal\n"\n\n" To open the terminal:\n"  (A) :terminal\n"  (B) :vnew term://bash\n"  (C) :new term://bash\n"\n" Entering the terminal emulator: Press <i> to start typing terminal command\n"\n" To exit terminal commad: Press <C-\\><C-n>\n"\n" To exit terminal emulator: exit<Enter>\n')])])]),t("h3",{attrs:{id:"tmux-設定檔（～-tmux-conf）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tmux-設定檔（～-tmux-conf）"}},[n._v("#")]),n._v(" Tmux 設定檔（～/.tmux.conf）")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("# https://tmuxguide.readthedocs.io/en/latest/tmux/tmux.html#tmux-conf\n\n#========================================================\n# Tmux Plugins\n#========================================================\n\n# Tmux Plugin Manager\nif \"test ! -d ~/.tmux/plugins/tpm\" \\\n     \"run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'\"\n\n# List of plugins\n     set -g @plugin 'tmux-plugins/tpm'\n     set -g @plugin 'tmux-plugins/tmux-sensible'\n\n# Session save and restore\n#  - continuous saving of tmux environment\n#  - automatic tmux start when computer/server is turned on\n#  - automatic restore when tmux is started\n     set -g @plugin 'tmux-plugins/tmux-resurrect'\n     set -g @plugin 'tmux-plugins/tmux-continuum'\n\n     set -g @plugin 'tmux-plugins/tmux-yank'\n     set -g default-command \"reattach-to-user-namespace -l $SHELL\"\n\n     set -g @resurrect-strategy-vim 'session'\n\n# Other examples:\n# set -g @plugin 'github_username/plugin_name'\n# set -g @plugin 'git@github.com/user/plugin'\n# set -g @plugin 'git@bitbucket.com/user/plugin'\n\n# Tmux Powerline theme\n     set -g @plugin 'jooize/tmux-powerline-theme'\n\n\n#========================================================\n# Tmux Configuration\n#========================================================\n\n# unbind default prefix and set it to ctrl-a\n     set -g prefix C-t\n     unbind C-b\n     bind C-t send-prefix\n\n# make delay shorter\n     set -sg escape-time 0\n\n# Automatic restore session\n     set -g @continuum-restore 'on'\n\n# history size\n     set -g history-limit 10000\n\n# enable mouse support for switching panes/windows\n     set -g mouse on\n\n### other optimization\n\n# display things in 256 colors\n# set -g default-terminal \"xterm-256color\"\n# set -ga terminal-overrides \",xterm-256color:Tc\"\n\n# tell Tmux that outside terminal supports true color\n     set -g default-terminal \"screen-256color\"\n     set -ga terminal-overrides \",xterm-256color*:Tc\"\n\n# stop auto renaming\n     setw -g automatic-rename off\n     set-option -g allow-rename off\n\n# renumber windows sequentially after closing\n     set -g renumber-windows on\n\n# window notifications; display activity on other window\n     setw -g monitor-activity on\n     set -g visual-activity on\n\n\n#\n# Status Line\n#\n\n# Status Line Format\n     set-window-option -g status-left \"\"\n     set-window-option -g status-right \"#[fg=white,bg=colour88] #S #[fg=colour231,bg=colour240] #H #[fg=black,bg=colour252,nobold] %b %d %a #[bold]%H:%M\"\n\n# default status bar colors\n     set -g status-fg colour240\n     set -g status-bg colour233\n\n# default window title colors\n     set-window-option -g window-status-style fg=colour220\n     set-window-option -g window-status-style bg=default\n\n#\n# Status bar window in background (not active)\n#\n# set-window-option -g window-status-format \"#I #W \"\n\n     set-window-option -g window-status-style dim\n     set-window-option -g window-status-style bg=colour240\n     set-window-option -g window-status-style fg=colour231\n\n#\n# Status bar window currently active\n#\n# set-window-option -g window-status-current-format \"#I #W \"\n\n# active window title colors\n     set-window-option -g window-status-current-style bright\n     set-window-option -g window-status-current-style bg=colour68\n     set-window-option -g window-status-current-style fg=colour220\n\n\n#========================================================\n# Key bindings\n#========================================================\n\n# reload config file\n     bind r source-file ~/.tmux.conf \\; display-message \"Config reloaded...\"\n\n# quickly open a new window\n     bind N new-window\n\n# synchronize all panes in a window\n     bind y setw synchronize-panes\n\n# \"|\" splits the current window vertically, and \"-\" splits it horizontally\n     unbind %\n     bind | split-window -h\n     bind - split-window -v\n\n# Pane navigation (vim-like)\n     bind h select-pane -L\n     bind j select-pane -D\n     bind k select-pane -U\n     bind l select-pane -R\n\n# Pane resizing\n     bind -r Left  resize-pane -L 4\n     bind -r Down  resize-pane -D 4\n     bind -r Up    resize-pane -U 4\n     bind -r Right resize-pane -R 4\n\n# Move window\n     bind-key S-Left swap-window -t -1\n     bind-key S-Right swap-window -t +1\n\n# Cycle prev/next pane\n# bind -n S-Left  select-pane -t :.-\n# bind -n S-Right select-pane -t :.+\n# bind -n C-n     select-pane -t :.+\n\n# Open current directory\n     bind f run-shell \"open #{pane_current_path}\"\n\n#### copy mode : vim ####\n\n     bind P paste-buffer\n\n# set vi mode for copy mode\n     setw -g mode-keys vi\n\n# Setup 'v' to begin selection as in Vim\n     bind -T copy-mode-vi 'v' send-keys -X begin-selection\n\n# Copy to tmux buffer\n# For binding 'y' to copy and exiting selection mode\n     bind -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel \"xclip -sel clip -i\"\n\n# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)\n     run -b '~/.tmux/plugins/tpm/tpm'\n")])])])])}),[],!1,null,null,null);e.default=o.exports}}]);